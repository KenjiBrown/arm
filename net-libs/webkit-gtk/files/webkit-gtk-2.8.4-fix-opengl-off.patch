+++ a/Source/WebCore/platform/graphics/texmap/TextureMapperGL.cpp	
@@ -20,6 +20,8 @@ 
  */
 
 #include "config.h"
+
+#if USE(TEXTURE_MAPPER_GL)
 #include "TextureMapperGL.h"
 
 #include "BitmapTextureGL.h"
@@ -52,8 +54,6 @@ 
 #define GL_UNPACK_SKIP_ROWS 0x0CF3
 #endif
 
-#if USE(TEXTURE_MAPPER)
-
 namespace WebCore {
 struct TextureMapperGLData {
     WTF_MAKE_FAST_ALLOCATED;
@@ -798,12 +798,11 @@ PassRefPtr<BitmapTexture> TextureMapperGL::createTexture()
     return adoptRef(texture);
 }
 
-#if USE(TEXTURE_MAPPER_GL)
 std::unique_ptr<TextureMapper> TextureMapper::platformCreateAccelerated()
 {
     return std::make_unique<TextureMapperGL>();
 }
-#endif
 
 };
-#endif
+
+#endif // USE(TEXTURE_MAPPER_GL)
--- a/Source/WebCore/platform/graphics/texmap/TextureMapperShaderProgram.cpp	
+++ a/Source/WebCore/platform/graphics/texmap/TextureMapperShaderProgram.cpp	
@@ -20,9 +20,11 @@ 
  */
 
 #include "config.h"
+
+#if USE(TEXTURE_MAPPER_GL)
+
 #include "TextureMapperShaderProgram.h"
 
-#if USE(TEXTURE_MAPPER)
 #include "LengthFunctions.h"
 #include "Logging.h"
 #include "TextureMapperGL.h"
@@ -401,4 +403,4 @@ PassRefPtr<TextureMapperShaderProgram> TextureMapperShaderProgram::create(PassRe
 }
 
 }
-#endif
+#endif // USE(TEXTURE_MAPPER_GL)
--- a/Source/WebKit2/UIProcess/API/gtk/WebKitWebViewBase.cpp	
+++ a/Source/WebKit2/UIProcess/API/gtk/WebKitWebViewBase.cpp	
@@ -1390,19 +1390,21 @@ void webkitWebViewBaseExitAcceleratedCompositingMode(WebKitWebViewBase* webkitWe
 
 void webkitWebViewBaseDidRelaunchWebProcess(WebKitWebViewBase* webkitWebViewBase)
 {
-#if PLATFORM(X11)
+#if PLATFORM(X11) && (USE(REDIRECTED_XCOMPOSITE_WINDOW) || USE(TEXTURE_MAPPER_GL))
     WebKitWebViewBasePrivate* priv = webkitWebViewBase->priv;
     DrawingAreaProxyImpl* drawingArea = static_cast<DrawingAreaProxyImpl*>(priv->pageProxy->drawingArea());
     ASSERT(drawingArea);
+    Window native;
 #if USE(REDIRECTED_XCOMPOSITE_WINDOW)
     if (!priv->redirectedWindow)
         return;
-    drawingArea->setNativeSurfaceHandleForCompositing(priv->redirectedWindow->windowID());
-#else
+    native = priv->redirectedWindow->windowID();
+#elif USE(TEXTURE_MAPPER_GL)
     if (!gtk_widget_get_realized(GTK_WIDGET(webkitWebViewBase)))
         return;
-    drawingArea->setNativeSurfaceHandleForCompositing(GDK_WINDOW_XID(gtk_widget_get_window(GTK_WIDGET(webkitWebViewBase))));
+    native = GDK_WINDOW_XID(gtk_widget_get_window(GTK_WIDGET(webkitWebViewBase)));
 #endif
+    drawingArea->setNativeSurfaceHandleForCompositing(native);
 #else
     UNUSED_PARAM(webkitWebViewBase);
 #endif
--- a/Source/WebKit2/WebProcess/WebPage/LayerTreeHost.cpp	
+++ a/Source/WebKit2/WebProcess/WebPage/LayerTreeHost.cpp	
@@ -48,6 +48,7 @@ PassRefPtr<LayerTreeHost> LayerTreeHost::create(WebPage* webPage)
     return LayerTreeHostGtk::create(webPage);
 #else
     UNUSED_PARAM(webPage);
+    ASSERT_NOT_REACHED();
     return 0;
 #endif
 }
